# The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
#
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
#
# Let us list the factors of the first seven triangle numbers:
#
#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.
#
# What is the value of the first triangle number to have over five hundred divisors?


import pandas as pd
import numpy as np
import math


import pandas as pd
import numpy as np

num = 0
def primefac(n):
    product = -999
    factors = np.array([])
    oddtest = 3
    while n > 1:
        # print(oddtest, n, factors, n % oddtest, "n/odd",n / oddtest)
        if n % 2 == 0:
            if n == 2:
                return factors
            n = n / 2
            n = int(n)
            factors = np.append(factors, 2)
        else:
            if n % oddtest == 0:
                # print(oddtest, n**2)
                factors = np.append(factors, oddtest)
                # print("appended", oddtest)
                n = n / oddtest
                n = int(n)
                oddtest == 3
                # print("reset oddtest", oddtest)
                if n == oddtest:
                    # print('n = oddtest, appending and returning')
                    factors = np.append(factors, oddtest)
                    return factors
            else:
                oddtest += 2
    return factors

      #--------MATH----------#
    #print(factors)
def math(n):
    l = 0
    m = 0
    allfact = np.array([])
    n = np.unique(n)
    #print(n)
    bigvars = 0
    for i in range(0, len(n)):
        bigvars = bigvars + (int(n[l]) * int(n[i]))
        #allfact = np.append(allfact, bigvars)

    q = 0
    z = 0
    while q < len(n):
        #print((q,z))
        #print((n[q], n[z]), (n[q] * n[z]))
        if int(int(n[q]) * int(n[z])) <= num/2:

            if( n[q] % n[z] != 0) and ( n[z] % n[q] != 0):
            # if( n[q] != (n[z]**2) ) and (n[z] != n[q]**2) and (n[q] != n[z]) and q != z:
                #print("appending:", int(n[q]) * int(n[z]) )
                allfact = np.append(allfact, int(n[q]) * int(n[z]))

        z += 1

        if z == len(n):
            z = z * 0

            q += 1
    allfact = np.append(allfact, n)

    return allfact

#-------------END FUNC-----------#

np.set_printoptions(formatter={'all':'{:f}'.format})

def findpowers(n):
    itr = 0
    i = 0
    powerapp = np.array([])

    unique, counts = np.unique(n, return_counts=True)
    #print("unique",unique, len(unique))
    #print("counts",counts,len(counts))
    powerapp = np.append(powerapp, n)
    while i < len(unique):

        #powerapp = np.append(powerapp, n)
        indecies = counts[i]
        while indecies > 1:
            powerapp = np.append(powerapp, (unique[i])**indecies)
            #print(unique[i], indecies,(unique[i])**indecies)
            indecies -= 1
            #print(indecies)
        i += 1
    return powerapp

k = 0
q = 0
skip = 0
while 1 == 1:
    num = k
    done = np.array([num, 1])
    done = np.append(done, math(findpowers(primefac(num))))
    if skip == 1000:
        print("----------------------------------------------------", len(done))
        skip = 0
    skip += 1
    if len(done) > 500:
        print(k , "<----FOUND!")
        break;
    k += q
    q += 1


done = np.array([num, 1])
done = np.append(done, math(findpowers(primefac(num))))
#print(done)

done = np.unique(done)

# print(len(np.unique(done)))
#print(done)
#print(done)
# print("array is", primefac(num))
# print(len(primefac(num)))
# facarray = primefac(num)

# for i in range(0,facarray.size()):
#     product

#print(math.perm(4))
